// import { useState } from "react";
// import Calendar from "react-calendar";
// import styles from "./MainPageHeader.module.css";
// import "react-calendar/dist/Calendar.css";
// import dayjs from "dayjs";
// import 'dayjs/locale/uk'; // –ò–º–ø–æ—Ä—Ç –ª–æ–∫–∞–ª–∏
// import { uk } from 'date-fns/locale';

// dayjs.locale('uk'); // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–æ–∫–∞–ª–∏

// export default function CalendarComponent() {
//     const [date, setDate] = useState<Date | null>(new Date()); // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ null
//     const [isMonthPickerOpen, setIsMonthPickerOpen] = useState(false);

//     const handleMonthChange = (event: React.ChangeEvent<HTMLSelectElement>) => {
//         const selectedMonth = parseInt(event.target.value, 10);
//         const newDate = new Date(date?.getFullYear() || new Date().getFullYear(), selectedMonth, 1);
//         setDate(newDate);
//         setIsMonthPickerOpen(false);
//     };

//     // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
//     const handleDateChange = (newDate: Date | null) => {
//         setDate(newDate); // –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å null
//     };

//     return (
//         <div className={styles.calendar}>
//             {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º */}           
//                 <button onClick={() => setIsMonthPickerOpen(!isMonthPickerOpen)}>
//                     üìÖ –í–∏–±—Ä–∞—Ç–∏ –º—ñ—Å—è—Ü—å
//                 </button>
           
//             {/* –°–ø–∏—Å–æ–∫ –º–µ—Å—è—Ü–µ–≤ */}
//             {isMonthPickerOpen && (
//                 <select onChange={handleMonthChange} value={date?.getMonth() || 0}>
//                     {Array.from({ length: 12 }, (_, i) => (
//                         <option key={i} value={i}>
//                             {dayjs().month(i).format("MMMM")}
//                         </option>
//                     ))}
//                 </select>
//             )}

//             {/* –ö–∞–ª–µ–Ω–¥–∞—Ä—å */}
//             <Calendar
//                 onChange={handleDateChange} // –ü–µ—Ä–µ–¥–∞–µ–º handleDateChange
//                 value={date}
//                 view="month"
//                 locale="uk"
//                 navigationLabel={({ date }) => (
//                     <span style={{ color: "green", fontWeight: "bold", fontSize:"20px" }}>
//                       {dayjs(date).format("MMMM YYYY")}
//                     </span>
//                      )}
//                     tileClassName={({ date: calendarDate }) =>
//                         dayjs(calendarDate).isSame(dayjs(), "day") ? styles.today : ""
//                       }
//             />
//         </div>
//     );
// }

import { useState } from "react";
import Calendar from "react-calendar";
import styles from "./MainPageHeader.module.css";
import "react-calendar/dist/Calendar.css";
import dayjs from "dayjs";
import 'dayjs/locale/uk'; // –ò–º–ø–æ—Ä—Ç –ª–æ–∫–∞–ª–∏

dayjs.locale('uk'); // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–æ–∫–∞–ª–∏

export default function CalendarComponent() {
    const [date, setDate] = useState<Date | null>(new Date()); // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ null
    const [isMonthPickerOpen, setIsMonthPickerOpen] = useState(false);

    const handleMonthChange = (event: React.ChangeEvent<HTMLSelectElement>) => {
        const selectedMonth = parseInt(event.target.value, 10);
        const newDate = new Date(date?.getFullYear() || new Date().getFullYear(), selectedMonth, 1);
        setDate(newDate);
        setIsMonthPickerOpen(false);
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
    const handleDateChange = (newDate: Date | null) => {
        setDate(newDate); // –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å null
    };

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –≥–æ–¥
    const currentMonth = dayjs().month();
    const currentYear = dayjs().year();

    return (
        <div className={styles.calendar}>
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º */}
            <button onClick={() => setIsMonthPickerOpen(!isMonthPickerOpen)}>
                üìÖ –í–∏–±—Ä–∞—Ç–∏ –º—ñ—Å—è—Ü—å
            </button>

            {/* –°–ø–∏—Å–æ–∫ –º–µ—Å—è—Ü–µ–≤ */}
            {isMonthPickerOpen && (
                <select onChange={handleMonthChange} value={date?.getMonth() || 0}>
                    {Array.from({ length: 12 }, (_, i) => (
                        <option key={i} value={i}>
                            {dayjs().month(i).format("MMMM")}
                        </option>
                    ))}
                </select>
            )}

            {/* –ö–∞–ª–µ–Ω–¥–∞—Ä—å */}
            <Calendar
                onChange={handleDateChange} // –ü–µ—Ä–µ–¥–∞–µ–º handleDateChange
                value={date}
                view="month"
                locale="uk"
                navigationLabel={({ date }) => (
                    <span style={{ color: "green", fontWeight: "bold", fontSize:"20px" }}>
                        {dayjs(date).format("MMMM YYYY")}
                    </span>
                )}
                tileClassName={({ date: calendarDate }) => {
                    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –¥–∞—Ç–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º –¥–Ω–µ–º
                    if (dayjs(calendarDate).month() === currentMonth && dayjs(calendarDate).isSame(dayjs(), "day")) {
                        return styles.today;
                    }
                    return ""; // –î–ª—è –¥—Ä—É–≥–∏—Ö –º–µ—Å—è—Ü–µ–≤ –Ω–µ –≤—ã–¥–µ–ª—è–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
                }}
                // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –º–µ—Å—è—Ü, –æ—Ç–ª–∏—á–Ω—ã–π –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ
                tileDisabled={({ date: calendarDate }) => {
                    if (dayjs(calendarDate).month() !== currentMonth) {
                        return true; // –û—Ç–∫–ª—é—á–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–µ—Å—è—Ü–µ–≤
                    }
                    return false;
                }}
            />
        </div>
    );
}
